1 Graphical exploratory data analysis
Look before you leap! A very important proverb, indeed. Prior to diving in headlong into sophisticated statistical inference techniques, you should first explore your data by plotting them and computing simple summary statistics. This process, called exploratory data analysis, is a crucial first step in statistical analysis of data. So it is a fitting subject for the first chapter of Statistical Thinking in Python.

Introduction to exploratory data analysis
50 XP
Tukey's comments on EDA
50 XP
Advantages of graphical EDA
50 XP
Plotting a histogram
50 XP
Plotting a histogram of iris data
100 XP
Axis labels!
100 XP
Adjusting the number of bins in a histogram
100 XP
Plotting all of your data: Bee swarm plots
50 XP
Bee swarm plot
100 XP
Interpreting a bee swarm plot
50 XP
Plotting all of your data: Empirical cumulative distribution functions
50 XP
Computing the ECDF
100 XP
Plotting the ECDF
100 XP
Comparison of ECDFs
100 XP
Onward toward the whole story
50 XP
Hide Details

Tukey's comments on EDA
Even though you probably have not read Tukey's book, I suspect you already have a good idea about his viewpoint from the video introducing you to exploratory data analysis. Which of the following quotes is not directly from Tukey?

ANSWER THE QUESTION
50 XP
Possible Answers
Exploratory data analysis is detective work.
press 1
There is no excuse for failing to plot and look.
press 2
The greatest value of a picture is that it forces us to notice what we never expected to see.
press 3
It is important to understand what you can do before you learn how to measure how well you seem to have done it.
press 4
Often times EDA is too time consuming, so it is better to jump right in and do your hypothesis tests.
press 5

Submit Answer
Take Hint (-15 XP)

Answer #5 - Often times EDA is too time consuming, so it is better to jump right in and do your hypothesis tests.

Advantages of graphical EDA
Which of the following is not true of graphical EDA?

ANSWER THE QUESTION
50 XP
Possible Answers
It often involves converting tabular data into graphical form.
press 1
If done well, graphical representations can allow for more rapid interpretation of data.
press 2
A nice looking plot is always the end goal of a statistical analysis.
press 3
There is no excuse for neglecting to do graphical EDA.
press 4

Submit Answer
Take Hint (-15 XP)

Answer #3 - A nice looking plot is always the end goal of a statistical analysis.

EXERCISE
Plotting a histogram of iris data
For the exercises in this section, you will use a classic data set collected by botanist Edward Anderson and made famous by Ronald Fisher, one of the most prolific statisticians in history. Anderson carefully measured the anatomical properties of samples of three different species of iris, Iris setosa, Iris versicolor, and Iris virginica. The full data set is available as part of scikit-learn. Here, you will work with his measurements of petal length.

Plot a histogram of the petal lengths of his 50 samples of Iris versicolor using matplotlib/seaborn's default settings. Recall that to specify the default seaborn style, you can use sns.set(), where sns is the alias that seaborn is imported as.

The subset of the data set containing the Iris versicolor petal lengths in units of centimeters (cm) is stored in the NumPy array versicolor_petal_length.

In the video, Justin plotted the histograms by using the pandas library and indexing the DataFrame to extract the desired column. Here, however, you only need to use the provided NumPy array. Also, Justin assigned his plotting statements (except for plt.show()) to the dummy variable _. This is to prevent unnecessary output from being displayed. It is not required for your solutions to these exercises, however it is good practice to use it. Alternatively, if you are working in an interactive environment such as a Jupyter notebook, you could use a ; after your plotting statements to achieve the same effect. Justin prefers using _. Therefore, you will see it used in the solution code.

INSTRUCTIONS
100 XP
Import matplotlib.pyplot and seaborn as their usual aliases (plt and sns).
Use seaborn to set the plotting defaults.
Plot a histogram of the Iris versicolor petal lengths using plt.hist() and the provided NumPy array versicolor_petal_length.
Show the histogram using plt.show().
Take Hint (-30 XP)

# Import plotting modules
import matplotlib.pyplot as plt
import seaborn as sns


# Set default Seaborn style
sns.set()

# Plot histogram of versicolor petal lengths
_ = plt.hist(versicolor_petal_length)

# Show histogram
plt.show()

EXERCISE
Axis labels!
In the last exercise, you made a nice histogram of petal lengths of Iris versicolor, but you didn't label the axes! That's ok; it's not your fault since we didn't ask you to. Now, add axis labels to the plot using plt.xlabel() and plt.ylabel(). Don't forget to add units and assign both statements to _. The packages matplotlib.pyplot and seaborn are already imported with their standard aliases. This will be the case in what follows, unless specified otherwise.

INSTRUCTIONS
100 XP
Label the axes. Don't forget that you should always include units in your axis labels. Your y-axis label is just 'count'. Your x-axis label is 'petal length (cm)'. The units are essential!
Display the plot constructed in the above steps using plt.show().
Take Hint (-30 XP)

# Plot histogram of versicolor petal lengths
_ = plt.hist(versicolor_petal_length)

# Label axes
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('count')

# Show histogram
plt.show()












































