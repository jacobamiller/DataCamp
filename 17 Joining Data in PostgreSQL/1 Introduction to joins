1 Introduction to joins
In this chapter, you'll be introduced to the concept of joining tables, and explore the different ways you can enrich your queries using inner joins and self-joins. You'll also see how to use the case statement to split up a field into different categories.

Introduction to INNER JOIN
50 XP
Inner join
90 XP
Inner join (2)
100 XP
Inner join (3)
90 XP
INNER JOIN via USING
50 XP
Review inner join using on
50 XP
Inner join with using
100 XP
Self-ish joins, just in CASE
50 XP
Self-join
90 XP
Case when and then
100 XP
Inner challenge
90 XP
Hide Details

EXERCISE
Inner join
Throughout this course, you'll be working with the countries database containing information about the most populous world cities as well as country-level economic data, population data, and geographic data. This countries database also contains information on languages spoken in each country.

You can see the different tables in this database by clicking on the tabs on the bottom right below query.sql. Click through them to get a sense for the types of data that each table contains before you continue with the course! Take note of the fields that appear to be shared across the tables.

Recall from the video the basic syntax for an INNER JOIN, here including all columns in both tables:

SELECT *
FROM left_table
INNER JOIN right_table
ON left_table.id = right_table.id;
You'll start off with a SELECT statement and then build up to an inner join with the cities and countries tables. Let's get to it!

INSTRUCTIONS 1/3
30 XP
1
2
3
Begin by selecting all columns from the cities table.

Take Hint (-9 XP)

SELECT *
FROM cities

EXERCISE
Inner join
Throughout this course, you'll be working with the countries database containing information about the most populous world cities as well as country-level economic data, population data, and geographic data. This countries database also contains information on languages spoken in each country.

You can see the different tables in this database by clicking on the tabs on the bottom right below query.sql. Click through them to get a sense for the types of data that each table contains before you continue with the course! Take note of the fields that appear to be shared across the tables.

Recall from the video the basic syntax for an INNER JOIN, here including all columns in both tables:

SELECT *
FROM left_table
INNER JOIN right_table
ON left_table.id = right_table.id;
You'll start off with a SELECT statement and then build up to an inner join with the cities and countries tables. Let's get to it!

INSTRUCTIONS 
-- -- Begin by selecting all columns from the cities table.
-- SELECT *
-- FROM cities

-- -- Inner join the cities table on the left to the countries table on the right, keeping all of the fields in both tables. You should join on the country_code field in cities and the code field in countries.

-- -- Don't alias your tables here or in the next task though. Using cities and countries is fine for now.
-- SELECT *
-- FROM cities
-- INNER JOIN countries
-- ON cities.country_code = countries.code;

-- Modify the SELECT statement to keep only the name of the city, the name of the country, and the name of the region the country resides in.

-- Recall from our Intro to SQL for Data Science course that you can alias fields using AS. Alias the name of the city AS city and the name of the country AS country.

SELECT cities.name AS city, countries.name AS country, countries.region AS region
FROM cities
INNER JOIN countries
ON cities.country_code = countries.code;

EXERCISE
Inner join (2)
Instead of writing the full table name, you can use table aliasing as a shortcut. For tables you also use AS to add the alias immediately after the table name with a space. Check out the aliasing of cities and countries below.

SELECT c1.name AS city, c2.name AS country
FROM cities AS c1
INNER JOIN countries AS c2
ON c1.country_code = c2.code;
Notice that to select a field in your query that appears in multiple tables, you'll need to identify which table/table alias you're referring to by using a . in your SELECT statement.

You'll now explore a way to get data from both the countries and economies tables to examine the inflation rate for both 2010 and 2015.

INSTRUCTIONS
100 XP
Select

country code,
name of the country,
year, and
inflation rate
as the fields from an inner join of countries on the left with economies on the right. (What field do you need to use in ON to match the two tables?)

Alias countries AS c and economies AS e.

Alias c.code AS country_code. Don't alias the other fields.

Take Hint (-30 XP)

SELECT c.code AS country_code, c.name, e.year, e.inflation_rate
FROM countries AS c
INNER JOIN economies AS e
ON c.code = e.code;



EXERCISE
EXERCISE
Inner join (3)
The ability to combine multiple joins in a single query is a powerful feature of SQL. Check out how this is done with the left_table, the right_table, and the table1 from the diagrams in the slides. (table1 is introduced in Chapter 2 and is seen below.)

+-----+
| id  |
|-----|
|   1 |
|   2 |
|   3 |
+-----+
SELECT *
FROM left_table
INNER JOIN right_table
ON left_table.id = right_table.id
INNER JOIN table1
ON left_table.id = table1.id;
As you can see here it becomes tedious to continually write long table names in joins. This is when it becomes useful to alias each table using the first letter of its name (e.g. countries AS c)! It is standard practice to alias in this way and, if you choose to alias tables or are asked to specifically for an exercise in this course, you should follow this protocol.

Now, for each country, you want to get the country name, its region, and the fertility rate and unemployment rate for both 2010 and 2015.

INSTRUCTIONS

-- -- Create an inner join with countries on the left and populations on the right.
-- -- Alias countries AS c and populations AS p.
-- -- Select country code, name, and region from countries and also select year and fertility_rate from populations. (This corresponds to selecting five fields in total.)


-- SELECT c.code, c.name, c.region, p.year, p.fertility_rate
-- FROM countries AS c
-- INNER JOIN populations AS p
-- ON c.code = p.country_code

-- Look over the tables given next to query result first if you haven't already.
-- Add an additional inner join to your previous query to include the unemployment rate for each country by joining on code.
-- Note that year appears in both populations and economies, so include e.year in your SELECT clause for now, but don't include it in ON yet.

-- SELECT c.code, name, region, e.year, fertility_rate, unemployment_rate
-- FROM countries AS c
-- INNER JOIN populations AS p
-- ON c.code = p.country_code
-- INNER JOIN economies AS e
-- ON c.code = e.code;

-- Scroll down the query result and take a look at the results for Albania from your previous query. Does something seem off to you?

-- The trouble with doing your last join on c.code = e.code and not also including year is that e.g. the 2010 value for fertility_rate is also paired with the 2015 value for unemployment_rate. Fix your previous query by joining on both code and year using AND in your last ON clause!

SELECT c.code, name, region, e.year, fertility_rate, unemployment_rate
FROM countries AS c
INNER JOIN populations AS p
ON c.code = p.country_code
INNER JOIN economies AS e
ON c.code = e.code AND e.year = p.year;

EXERCISE
Review inner join using on
Why does the following code result in an error?

SELECT c.name AS country, l.name AS language
FROM countries AS c
INNER JOIN languages AS l;
INSTRUCTIONS
50 XP
Possible Answers
The languages table has more rows than the countries table.
press 1
There are multiple languages spoken in many countries.
press 2
INNER JOIN requires a specification of the key field (or fields) in each table.
press 3
Join queries may not be followed by a semi-colon.
press 4'

Answer #3 - INNER JOIN requires a specification of the key field (or fields) in each table.

EXERCISE
Inner join with using
When joining tables with a common field name (e.g. countries.code = cities.code), you can use USING as a shortcut. Here, you could just do USING (code). Neat, huh?

You'll now explore how this can be done with the countries and languages tables.

INSTRUCTIONS
100 XP
Inner join countries on the left and languages on the right USING code. Select the fields corresponding to

country name AS country,
continent name,
language name AS language, and
whether or not the language is official.
Remember to alias your tables using the first letter of their names.

Take Hint (-30 XP)

SELECT c.name AS country, continent, l.name AS language, official
FROM countries AS c
INNER JOIN languages AS l
USING (code);

EXERCISE
Self-join
In this exercise, you'll use the populations table to perform a self-join to calculate the percentage increase in population from 2010 to 2015 for each country code!

Since you'll be joining the populations table to itself, you can alias populations as p1 and also populations as p2. This is good practice whenever you are aliasing and your tables have the same first letter. Note that you are required to alias the tables with self-joins.

INSTRUCTIONS

-- -- Join populations with itself ON country_code.
-- -- Select the country_code and size from p1 and the size from p2 as your fields.
-- -- So you don't have two fields in your result with the same name of size (which produces an error in SQL), you'll alias p1.size as size2010 and p2.size as size2015.

-- SELECT p1.country_code, 
--       p1.size AS size2010,
--       p2.size AS size2015
-- FROM populations AS p1
-- INNER JOIN populations AS p2
-- ON  p1.country_code = p2.country_code;

-- -- Notice from the result that for each country_code you have four entries laying out all combinations of 2010 and 2015.
-- -- Add to the ON in your query to include only those records where the p1.year (2010) matches with p2.year - 5 (2015 - 5 = 2010).
-- -- This will omit the three entries per country_code that you aren't interested in.

-- SELECT p1.country_code, 
--       p1.size AS size2010,
--       p2.size AS size2015
-- FROM populations AS p1
-- INNER JOIN populations AS p2
-- ON  p1.country_code = p2.country_code
-- AND p1.year = p2.year -5;

-- As you just saw, you can also use SQL to calculate values like p2.year - 5 for you. With two fields like size2010 and size2015, you may want to determine the percentage increase from one field to the next:
-- With two numeric fields A and B, the percentage growth from A to B can be calculated as (B−A)/A∗100.0.
-- Lastly, keep your current query intact and use the p2.size and p1.size fields to calculate a new field aliased as growth_perc in SELECT that contains the percentage population growth from 2010 to 2015 for each country.

SELECT p1.country_code,
      p1.size AS size2010,
      p2.size AS size2015,
      ((p2.size - p1.size) / p1.size * 100.0) AS growth_perc
FROM populations AS p1
INNER JOIN populations AS p2
ON  p1.country_code = p2.country_code
AND p1.year = p2.year -5;

EXERCISE
Case when and then
Often it's useful to look at a numerical field not as raw data, but instead as being in different categories or groups.

You can use CASE with WHEN, THEN, ELSE, and END to define a new grouping field.

INSTRUCTIONS
100 XP
Using the countries table, create a new field AS geosize_group that groups the countries into three groups:

If surface_area is greater than 2 million, geosize_group is 'large'.
If surface_area is greater than 350 thousand but not larger than 2 million, geosize_group is 'medium'.
Otherwise, geosize_group is 'small'.
Take Hint (-30 XP)

-- get name, continent, code, and surface area
SELECT name, continent, code, surface_area,
    -- first case
    CASE WHEN surface_area > 2000000
    -- first then
            THEN 'large'
    -- second case
      WHEN surface_area > 350000
    -- second then
            THEN 'medium'
    -- else clause + end
       ELSE 'small' END
    -- alias resulting field of CASE WHEN
       AS geosize_group
-- from the countries table
FROM countries;

EXERCISE
Inner challenge
The table you created with the added geosize_group field has been loaded for you here with the name countries_plus. Observe the use of (and the placement of) the INTO command to create this countries_plus table:

SELECT name, continent, code, surface_area,
    CASE WHEN surface_area > 2000000
            THEN 'large'
       WHEN surface_area > 350000
            THEN 'medium'
       ELSE 'small' END
       AS geosize_group
INTO countries_plus
FROM countries;
You will now explore the relationship between the size of a country in terms of surface area and in terms of population using grouping fields created with CASE.

By the end of this exercise, you'll be writing two queries back-to-back in a single script. You got this!

INSTRUCTIONS

-- -- INSTRUCTIONS 1/3
-- --Using the populations table focused only on 2015, create a new field AS popsize_group to organize population size into

-- -- 'large' (> 50 million),
-- -- 'medium' (> 1 million), and
-- -- 'small' groups.
-- -- Select only the country code, population size, and this new popsize_group as fields.

-- SELECT p.country_code, p.size,
--   -- start CASE here with WHEN and THEN
--     CASE WHEN p.size > 50000000
--         THEN 'large'
--   -- layout other CASE conditions here
--     WHEN p.size > 1000000
--         THEN 'medium'
--   -- end CASE here with ELSE & END
--     ELSE 'small' END
--   -- provide the alias of popsize_group to SELECT the new field
--     AS popsize_group
-- -- which table?
-- FROM populations AS p
-- -- any conditions to check?
-- WHERE p.year = 2015;

-- --INSTRUCTIONS 2/3
-- -- Use INTO to save the result of the previous query as pop_plus. You can see an example of this in the countries_plus code in the assignment text. Make sure to include a ; at the end of your WHERE clause!
-- -- Then, include another query below your first query to display all the records in pop_plus using SELECT * FROM pop_plus; so that you generate results and this will display pop_plus in query result.

-- SELECT p.country_code, p.size,
--   -- start CASE here with WHEN and THEN
--     CASE WHEN p.size > 50000000
--         THEN 'large'
--   -- layout other CASE conditions here
--     WHEN p.size > 1000000
--         THEN 'medium'
--   -- end CASE here with ELSE & END
--     ELSE 'small' END
--   -- provide the alias of popsize_group to SELECT the new field
--     AS popsize_group
-- -- which table?
-- INTO pop_plus
-- FROM populations AS p
-- -- any conditions to check?
-- WHERE p.year = 2015;

-- SELECT *
-- FROM pop_plus;

-- INSTRUCTIONS 3/3
-- Keep the first query intact that creates pop_plus using INTO.
-- Remove the SELECT * FROM pop_plus; code and instead write a second query to join countries_plus AS c on the left with pop_plus AS p on the right matching on the country code fields.
-- Select country name, continent, the surface area grouping (NOT surface_area), and the population grouping fields. (Four fields total.)
-- Sort the data based on geosize_group, in ascending order so that large appears on top.

SELECT p.country_code, p.size,
  -- start CASE here with WHEN and THEN
    CASE WHEN p.size > 50000000
        THEN 'large'
  -- layout other CASE conditions here
    WHEN p.size > 1000000
        THEN 'medium'
  -- end CASE here with ELSE & END
    ELSE 'small' END
  -- provide the alias of popsize_group to SELECT the new field
    AS popsize_group
-- which table?
INTO pop_plus
FROM populations AS p
-- any conditions to check?
WHERE p.year = 2015;

SELECT c.name, c.continent, c.geosize_group, p.popsize_group
FROM countries_plus AS c
INNER JOIN pop_plus AS p
ON c.code = p.country_code
ORDER BY geosize_group

