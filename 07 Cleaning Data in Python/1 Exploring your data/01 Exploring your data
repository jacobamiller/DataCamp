1 Exploring your data

So you've just got a brand new dataset and are itching to start exploring it. But where do you begin, and how can you be sure your dataset is clean? This chapter will introduce you to the world of data cleaning in Python! You'll learn how to explore your data with an eye for diagnosing issues such as outliers, missing values, and duplicate rows.

Diagnose data for cleaning
50 XP
Loading and viewing your data
50 XP
Further diagnosis
50 XP
Exploratory data analysis
50 XP
Calculating summary statistics
50 XP
Frequency counts for categorical data
100 XP
Visual exploratory data analysis
50 XP
Visualizing single variables with histograms
100 XP
Visualizing multiple variables with boxplots
100 XP
Visualizing multiple variables with scatter plots 
100 XP

Loading and viewing your data
In this chapter, you're going to look at a subset of the Department of Buildings Job Application Filings dataset from the NYC Open Data portal. This dataset consists of job applications filed on January 22, 2017.

Your first task is to load this dataset into a DataFrame and then inspect it using the .head() and .tail() methods. However, you'll find out very quickly that the printed results don't allow you to see everything you need, since there are too many columns. Therefore, you need to look at the data in another way.

The .shape and .columns attributes let you see the shape of the DataFrame and obtain a list of its columns. From here, you can see which columns are relevant to the questions you'd like to ask of the data. To this end, a new DataFrame, df_subset, consisting only of these relevant columns, has been pre-loaded. This is the DataFrame you'll work with in the rest of the chapter.

Get acquainted with the dataset now by exploring it with pandas! This initial exploratory analysis is a crucial first step of data cleaning.

INSTRUCTIONS
50 XP
Import pandas as pd.
Read 'dob_job_application_filings_subset.csv' into a DataFrame called df.
Print the head and tail of df.
Print the shape of df and its columns. Note: .shape and .columns are attributes, not methods, so you don't need to follow these with parentheses ().
Hit 'Submit Answer' to view the results! Notice the suspicious number of 0 values. Perhaps these represent missing data.
Take Hint (-15 XP)

# Import pandas
import pandas as pd

# Read the file into a DataFrame: df
df = pd.read_csv('dob_job_application_filings_subset.csv')

# Print the head of df
print(df.head())

# Print the tail of df
print(df.tail())

# Print the shape of df
print(df.shape)

# Print the columns of df
print(df.columns)

# Print the head and tail of df_subset
print(df_subset.head())
print(df_subset.tail())

Further diagnosis
In the previous exercise, you identified some potentially unclean or missing data. Now, you'll continue to diagnose your data with the very useful .info() method.

The .info() method provides important information about a DataFrame, such as the number of rows, number of columns, number of non-missing values in each column, and the data type stored in each column. This is the kind of information that will allow you to confirm whether the 'Initial Cost' and 'Total Est. Fee' columns are numeric or strings. From the results, you'll also be able to see whether or not all columns have complete data in them.

The full DataFrame df and the subset DataFrame df_subset have been pre-loaded. Your task is to use the .info() method on these and analyze the results.

INSTRUCTIONS 
50 XP
Print the info of df.
Print the info of the subset dataframe, df_subset.
Take Hint (-15 XP)

# Print the info of df
print(df.info())

# Print the info of df_subset
print(df_subset.info())

EXERCISE
Calculating summary statistics
You'll now use the .describe() method to calculate summary statistics of your data.

In this exercise, the columns 'Initial Cost' and 'Total Est. Fee' have been cleaned up for you. That is, the dollar sign has been removed and they have been converted into two new numeric columns: initial_cost and total_est_fee. You'll learn how to do this yourself in later chapters. Also worth noting is that some columns such as Job # are encoded as numeric columns, but it does not make sense to compute summary statistics for such columns.

This cleaned DataFrame has been pre-loaded as df. Your job is to use the .describe() method on it in the IPython Shell and select the statement below that is False.

INSTRUCTIONS
50 XP
Possible Answers
The mean of 'Proposed No. of Stories' is 8.144325.
press 1
The standard deviation of 'Existing Height' is 146.917360.
press 2
There are 12846 entries in the DataFrame.
press 3
The standard deviation of 'Street Frontage' is 11.874080.
press 4
The maximum of 'Proposed Height' is 4200.
press 5

In [2]: df.describe()
Out[2]: 
              Job #         Doc #  initial_cost  total_est_fee  \
count  1.284600e+04  12846.000000  1.284600e+04   1.284600e+04   
mean   2.426788e+08      1.162930  1.803139e+05   2.894909e+03   
std    1.312507e+08      0.514937  7.961524e+06   1.213534e+05   
min    1.036438e+08      1.000000  0.000000e+00   0.000000e+00   
25%    1.216206e+08      1.000000  0.000000e+00   2.250000e+02   
50%    2.202645e+08      1.000000  1.597500e+04   4.195000e+02   
75%    3.208652e+08      1.000000  6.790500e+04   9.297000e+02   
max    5.400246e+08      9.000000  9.003000e+08   1.014000e+07   

       Existing Zoning Sqft  Proposed Zoning Sqft  Enlargement SQ Footage  \
count          1.284600e+04          1.284600e+04            12846.000000   
mean           1.439973e+03          2.007286e+03               46.101432   
std            3.860757e+04          4.081570e+04              784.216569   
min            0.000000e+00          0.000000e+00                0.000000   
25%            0.000000e+00          0.000000e+00                0.000000   
50%            0.000000e+00          0.000000e+00                0.000000   
75%            0.000000e+00          0.000000e+00                0.000000   
max            2.873107e+06          2.873107e+06            50384.000000   

       Street Frontage  ExistingNo. of Stories  Proposed No. of Stories  \
count     12846.000000            12846.000000             12846.000000   
mean          3.069360                8.062354                 8.144325   
std          37.246034               11.874080                11.843492   
min           0.000000                0.000000                 0.000000   
25%           0.000000                1.000000                 2.000000   
50%           0.000000                4.000000                 4.000000   
75%           0.000000                9.000000                 9.000000   
max        3160.000000              102.000000               102.000000   

       Existing Height  Proposed Height  
count     12846.000000     12846.000000  
mean         94.022809        94.917562  
std         146.917360       146.580666  
min           0.000000         0.000000  
25%          20.000000        21.000000  
50%          45.000000        45.000000  
75%         105.000000       107.000000  
max        4200.000000      4200.000000

False = #4 = The standard deviation of 'Street Frontage' is 11.874080.

EXERCISE
Frequency counts for categorical data
As you've seen, .describe() can only be used on numeric columns. So how can you diagnose data issues when you have categorical data? One way is by using the .value_counts() method, which returns the frequency counts for each unique value in a column!

This method also has an optional parameter called dropna which is True by default. What this means is if you have missing data in a column, it will not give a frequency count of them. You want to set the dropna column to False so if there are missing values in a column, it will give you the frequency counts.

In this exercise, you're going to look at the 'Borough', 'State', and 'Site Fill' columns to make sure all the values in there are valid. When looking at the output, do a sanity check: Are all values in the 'State' column from NY, for example? Since the dataset consists of applications filed in NY, you would expect this to be the case.

INSTRUCTIONS
100 XP
Print the value counts for:
The 'Borough' column.
The 'State' column.
The 'Site Fill' column.
Take Hint (-30 XP)

# Print the value counts for 'Borough'
print(df['Borough'].value_counts(dropna=False))

# Print the value_counts for 'State'
print(df['State'].value_counts(dropna=False))

# Print the value counts for 'Site Fill'
print(df['Site Fill'].value_counts(dropna=False))

EXERCISE
Visualizing single variables with histograms
Up until now, you've been looking at descriptive statistics of your data. One of the best ways to confirm what the numbers are telling you is to plot and visualize the data.

You'll start by visualizing single variables using a histogram for numeric values. The column you will work on in this exercise is 'Existing Zoning Sqft'.

The .plot() method allows you to create a plot of each column of a DataFrame. The kind parameter allows you to specify the type of plot to use - kind='hist', for example, plots a histogram.

In the IPython Shell, begin by computing summary statistics for the 'Existing Zoning Sqft' column using the .describe() method. You'll notice that there are extremely large differences between the min and max values, and the plot will need to be adjusted accordingly. In such cases, it's good to look at the plot on a log scale. The keyword arguments logx=True or logy=True can be passed in to .plot() depending on which axis you want to rescale.

Finally, note that Python will render a plot such that the axis will hold all the information. That is, if you end up with large amounts of whitespace in your plot, it indicates counts or values too small to render.

INSTRUCTIONS
100 XP
Import matplotlib.pyplot as plt.
Create a histogram of the 'Existing Zoning Sqft' column. Rotate the axis labels by 70 degrees and use a log scale for both axes.
Display the histogram using plt.show().
Take Hint (-30 XP)

# Import matplotlib.pyplot
import matplotlib.pyplot as plt

# Plot the histogram
df['Existing Zoning Sqft'].plot(kind='hist', rot=70, logx=True, logy=True)

# Display the histogram
plt.show()

EXERCISE
Visualizing multiple variables with boxplots
Histograms are great ways of visualizing single variables. To visualize multiple variables, boxplots are useful, especially when one of the variables is categorical.

In this exercise, your job is to use a boxplot to compare the 'initial_cost' across the different values of the 'Borough' column. The pandas .boxplot() method is a quick way to do this, in which you have to specify the column and by parameters. Here, you want to visualize how 'initial_cost' varies by 'Borough'.

pandas and matplotlib.pyplot have been imported for you as pd and plt, respectively, and the DataFrame has been pre-loaded as df.

INSTRUCTIONS
100 XP
Using the .boxplot() method of df, create a boxplot of 'initial_cost' across the different values of 'Borough'.
Display the plot.
Take Hint (-30 XP)

# Import necessary modules
import pandas as pd
import matplotlib.pyplot as plt

# Create the boxplot
df.boxplot(column='initial_cost', by='Borough', rot=90)

# Display the plot
plt.show()

EXERCISE
Visualizing multiple variables with scatter plots
Boxplots are great when you have a numeric column that you want to compare across different categories. When you want to visualize two numeric columns, scatter plots are ideal.

In this exercise, your job is to make a scatter plot with 'initial_cost' on the x-axis and the 'total_est_fee' on the y-axis. You can do this by using the DataFrame .plot() method with kind='scatter'. You'll notice right away that there are 2 major outliers shown in the plots.

Since these outliers dominate the plot, an additional DataFrame, df_subset, has been provided, in which some of the extreme values have been removed. After making a scatter plot using this, you'll find some interesting patterns here that would not have been seen by looking at summary statistics or 1 variable plots.

When you're done, you can cycle between the two plots by clicking the 'Previous Plot' and 'Next Plot' buttons below the plot.

INSTRUCTIONS
100 XP
Using df, create a scatter plot (kind='scatter') with 'initial_cost' on the x-axis and the 'total_est_fee' on the y-axis. Rotate the x-axis labels by 70 degrees.
Create another scatter plot exactly as above, substituting df_subset in place of df.
Take Hint (-30 XP)

# Import necessary modules
import pandas as pd
import matplotlib.pyplot as plt

# Create and display the first scatter plot
df.plot(kind='scatter', x='initial_cost', y='total_est_fee', rot=70)
plt.show()

# Create and display the second scatter plot
df_subset.plot(kind='scatter', x='initial_cost', y='total_est_fee', rot=70)
plt.show()
