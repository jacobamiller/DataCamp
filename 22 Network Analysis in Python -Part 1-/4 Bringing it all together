4 Bringing it all together
In this final chapter of the course, you'll consolidate everything you've learned by diving into an in-depth case study of GitHub collaborator network data. This is a great example of real-world social network data, and your newly acquired skills will be fully tested. By the end of this chapter, you'll have developed your very own recommendation system which suggests GitHub users who should collaborate together. Enjoy!

Icon exercise video
Case study!
50 xp
Icon exercise mc
Characterizing the network (I)
50 xp
Icon exercise interactive
Characterizing the network (II)
100 xp
Icon exercise interactive
Characterizing the network (III)
100 xp
Icon exercise video
Case study part II: Visualization
50 xp
Icon exercise interactive
MatrixPlot
100 xp
Icon exercise interactive
ArcPlot
100 xp
Icon exercise interactive
CircosPlot
100 xp
Icon exercise video
Case study part III: Cliques
50 xp
Icon exercise interactive
Finding cliques (I)
100 xp
Icon exercise interactive
Finding cliques (II)
100 xp
Icon exercise video
Case study part IV: Final tasks
50 xp
Icon exercise interactive
Finding important collaborators
100 xp
Icon exercise interactive
Characterizing editing communities
100 xp
Icon exercise interactive
Recommending co-editors who have yet to edit together
100 xp
Icon exercise video
Final thoughts
50 xp
HIDE CHAPTER DETAILS

EXERCISE
Characterizing the network (I)
To start out, let's do some basic characterization of the network, by looking at the number of nodes and number of edges in a network. It has been pre-loaded as G and is available for exploration in the IPython Shell. Your job in this exercise is to identify how many nodes and edges are present in the network. You can use the functions len(G.nodes()) and len(G.edges()) to calculate the number of nodes and edges respectively.

INSTRUCTIONS
50 XP
Possible Answers
74095 nodes, 56519 edges.
press 1
56519 nodes, 74095 edges.
press 2
47095 nodes, 65789 edges.
press 3
63762 nodes, 71318 edges.
press 4
Take Hint (-15 XP)

Answer #2 - 56519 nodes, 74095 edges.
# Great work! G does indeed have 56519 nodes and 74095 

EXERCISE
Characterizing the network (II)
Let's continue recalling what you've learned before about node importances, by plotting the degree distribution of a network. This is the distribution of node degrees computed across all nodes in a network.

INSTRUCTIONS
100 XP
Plot the degree distribution of the GitHub collaboration network G. Recall that there are four steps involved here:
Calculating the degree centrality of G.
Using the .values() method of G and converting it into a list.
Passing the list of degree distributions to plt.hist().
Displaying the histogram with plt.show().
Take Hint (-30 XP)

# Import necessary modules
import matplotlib.pyplot as plt
import networkx as nx 

# Plot the degree distribution of the GitHub collaboration network
plt.hist(list(nx.degree_centrality(G).values()))
plt.show()

# Excellent job! The next step in characterizing the network is to explore its betweenness centrality distribution.

EXERCISE
Characterizing the network (III)
The last exercise was on degree centrality; this time round, let's recall betweenness centrality!

A small note: if executed correctly, this exercise may need about 5 seconds to execute.

INSTRUCTIONS
100 XP
Plot the betweenness centrality distribution of the GitHub collaboration network. You have to follow exactly the same four steps as in the previous exercise, substituting nx.betweenness_centrality() in place of nx.degree_centrality().
Take Hint (-30 XP)

# Import necessary modules
import matplotlib.pyplot as plt
import networkx as nx

# Plot the degree distribution of the GitHub collaboration network
plt.hist(list(nx.betweenness_centrality(G).values()))
plt.show()

# plt.hist(list(nx.degree_centrality(G).values()))
# plt.show()

# Fantastic! You'll now move on to visualizing the network using MatrixPlots, ArcPlots, and CircosPlots.














































