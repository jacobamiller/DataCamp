24 Naive Bees: Image Loading and Processing

Project Description
This project is DataCamp's Project of the Week! XP for this project is tripled (4500 instead of 1500) from September 6th through September 13th.

Can a machine distinguish between a honey bee and a bumble bee? Being able to identify bee species from images, while challenging, would allow researchers to more quickly and effectively collect field data. In this Project, you will use the Python image library Pillow to load and manipulate image data. You'll learn common transformations of images and how to build them into a pipeline.

This project is the first part of a series of Projects that walk through working with image data, building classifiers using traditional techniques, and leveraging the power of deep learning for computer vision.

The recommended prerequisites for this Project are Intermediate Python for Data Science and Introduction to Data Visualization with Python.

Project Tasks
1  Import Python libraries
2  Opening images with PIL
3  Image manipulation with PIL
4  Images as arrays of data
5  Explore the color channels
6  Honey bees and bumble bees (i)
7  Honey bees and bumble bees (ii)
8  Simplify, simplify, simplify
9  Save your work!
10 Make a pipeline

How it works
The project interface consists of a jupyter notebook on the right with the narrative and code, and a sidebar on the left with detailed instructions, hints and tests. Every project is broken down into smaller tasks.
Completing Tasks
In order to complete a task, you will need to:

Read the narrative in the notebook to understand the scope of the task.
Read the instructions in the sidebar to get more details on what is expected.
Write code in the notebook and run it by by pressing Shift + Enter, or clicking on the Run icon in the toolbar.
Checking Project
At any point in the project, you can click on the Check Project button at the bottom to test whether your output matches the solution.

If all the tests pass, your task circle will turn green.
If some tests fail, your task circle with turn orange. You can view the test results in the sidebar to understand what failed and update your code accordingly.
If you are unable to complete the task after repeated attempts, you can use the sidebar to ask for a hint.
The project is complete when you have successfully completed all tasks. At this point all the task circles will turn green!



# Used to change filepaths
from pathlib import Path

# We set up matplotlib, pandas, and the display function
%matplotlib inline
import matplotlib.pyplot as plt
from IPython.display import display
import pandas as pd

# import numpy to use in this cell
# ... YOUR CODE FOR TASK 1 ...
import numpy as np

# import Image from PIL so we can use it later
# ... YOUR CODE FOR TASK 1 ...
from PIL import Image

# generate test_data
# ... YOUR CODE FOR TASK 1 ...
test_data = np.random.beta((a,b) * (100, 100, 3))

# display the test_data
# ... YOUR CODE FOR TASK 1 ...
